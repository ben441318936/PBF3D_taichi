{"cells":[{"cell_type":"code","execution_count":7,"metadata":{},"outputs":[],"source":["from mesh_to_sdf import mesh_to_sdf\n","\n","import trimesh\n","import pyrender\n","import numpy as np\n","\n","sm = trimesh.creation.box(np.array([5.0, 5.0, 5.0]))\n","sm.visual.vertex_colors = [0.0, 1.0, 0.0, 0.1]\n","\n","bounds = [10, 10, 10]\n","increment = 0.1\n","\n","x = np.arange(-bounds[0]/2, bounds[0]/2, increment)\n","y = np.arange(-bounds[1]/2, bounds[1]/2, increment)\n","z = np.arange(-bounds[2]/2, bounds[2]/2, increment)\n","\n","sdf_points = []\n","\n","for xi in x:\n","    for yi in y:\n","        for zi in z:\n","            sdf_points.append([xi, yi, zi])\n","\n","sdf_points = np.array(sdf_points)\n"]},{"cell_type":"code","execution_count":8,"metadata":{"tags":[]},"outputs":[{"output_type":"stream","name":"stdout","text":"(1000000,)\n"}],"source":["sdf = mesh_to_sdf(sm, sdf_points)\n","print(sdf.shape)"]},{"cell_type":"code","execution_count":9,"metadata":{"tags":[]},"outputs":[{"output_type":"stream","name":"stdout","text":"(100, 100, 100)\n"}],"source":["\n","sdf_new = np.reshape(sdf, (x.shape[0],y.shape[0],z.shape[0]))\n","print(sdf_new.shape)\n"]},{"cell_type":"code","execution_count":10,"metadata":{},"outputs":[],"source":["sdf_grad = np.gradient(sdf_new, x, y, z) # This gives the volume normals\n"]},{"cell_type":"code","execution_count":11,"metadata":{},"outputs":[],"source":["def find_nearest_ind(array, value):\n","    array = np.asarray(array)\n","    idx = (np.abs(array - value)).argmin()\n","    return idx\n","\n","def get_inds(x, y, z, p):\n","    inds = [0, 0, 0]\n","    inds[0] = find_nearest_ind(x,p[0])\n","    inds[1] = find_nearest_ind(y,p[1])\n","    inds[2] = find_nearest_ind(z,p[2])\n","    return inds\n","\n","def get_grads(x, y, z, sdf_grad, p):\n","    ind = get_inds(x, y, z, p)\n","    grad = [0, 0, 0]\n","    grad[0] = sdf_grad[0][ind[0], ind[1], ind[2]]\n","    grad[1] = sdf_grad[1][ind[0], ind[1], ind[2]]\n","    grad[2] = sdf_grad[2][ind[0], ind[1], ind[2]]\n","    return grad\n"]},{"cell_type":"code","execution_count":12,"metadata":{"tags":[]},"outputs":[{"output_type":"stream","name":"stdout","text":"[0.99993765, -0.00017166138, 0.0010567904]\n[-0.99997103, -0.0025856495, -0.00051140785]\n[0.9999919, -0.00021100044, 0.00011026859]\n[-0.99997044, -0.00017344952, -2.6226044e-05]\n[0.97625107, 0.0031323626, 0.0018123887]\n[-0.97940177, 0.0002897263, -0.01299229]\n"}],"source":["# Exterior\n","p = [4, 0, 0]\n","print(get_grads(x, y, z, sdf_grad, p))\n","p = [-4, 0, 0]\n","print(get_grads(x, y, z, sdf_grad, p))\n","\n","# Interior\n","p = [1, 0, 0]\n","print(get_grads(x, y, z, sdf_grad, p))\n","p = [-1, 0, 0]\n","print(get_grads(x, y, z, sdf_grad, p))\n","\n","# Edge\n","p = [2.5, 0, 0]\n","print(get_grads(x, y, z, sdf_grad, p))\n","p = [-2.5, 0, 0]\n","print(get_grads(x, y, z, sdf_grad, p))\n"]}],"nbformat":4,"nbformat_minor":2,"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.5-final"},"orig_nbformat":2,"kernelspec":{"name":"python_defaultSpec_1598494279123","display_name":"Python 3.8.5 64-bit ('SurgicalRobo': conda)"}}}